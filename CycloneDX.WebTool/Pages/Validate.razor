@page "/validate"
@using System.IO
@using System.Text
@using CycloneDX.Models
@using CycloneDX.Xml
@using CycloneDX.Json

@inject IJSRuntime _jsRuntime;

<h1>Validate</h1>

<form>
    <label>
        File
        <InputFile id="inputFile" OnChange="@LoadInputFile"></InputFile>
    </label>
    
    <label>
        Format
        <select id="inputFormat" @bind="_inputFormat">
            <option value="autodetect" selected="selected">Autodetect</option>
            <option value="json">JSON</option>
            <option value="xml">XML</option>
        </select>
    </label>
    
    <label>
        Version
        <select id="inputVersion" @bind="_inputVersion">
            <option value="v1_3" selected="selected">v1.3</option>
            <option value="v1_2">v1.2</option>
            <option value="v1_1">v1.1</option>
            <option value="v1_0">v1.0</option>
        </select>
    </label>
    
    <button id="Validate" type="button" @onclick="@ValidateBOM" hidden="@(_inputFileContents == null)">Validate</button>
</form>

<p>@_validationMessage</p>

@code {
    private string _inputFileContents;
    private string _userInputFilename;
    private string _inputFormat = "autodetect";
    private string _inputVersion = "v1_3";
    private string _validationMessage = "";

    private async Task Alert(string message)
    {
        await _jsRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task LoadInputFile(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            using (var sr = new StreamReader(e.File.OpenReadStream()))
            {
                _inputFileContents = await sr.ReadToEndAsync();
            }
            _userInputFilename = e.File.Name;
        }
        else
        {
            _inputFileContents = null;
            _userInputFilename = null;
        }
    }

    private async Task ValidateBOM()
    {
        if (!Enum.TryParse(_inputVersion, out SchemaVersion schemaVersion))
        {
            await Alert("Looks like you've hit a bug. This shouldn't happen, but there has been a problem reading the schema version.");
            return;
        }

        ValidationResult result;

        if (_inputFormat == "json" || _inputFormat == "autodetect" && _userInputFilename.EndsWith(".json"))
        {
            try
            {
                result = await Json.Validator.Validate(_inputFileContents, schemaVersion);
            }
            catch (Exception e)
            {
                await Alert("Error validating BOM: " + e.Message);
                return;
            }
        }
        else if (_inputFormat == "xml" || _inputFormat == "autodetect" && _userInputFilename.EndsWith(".xml"))
        {
            try
            {
                result = await Xml.Validator.Validate(_inputFileContents, schemaVersion);
            }
            catch (Exception e)
            {
                await Alert("Error deserializing BOM: " + e.Message);
                return;
            }
        }
        else
        {
            await Alert("Unable to auto-detect input format. Please specify the format.");
            return;
        }

        if (result.Valid)
        {
            _validationMessage = "";
            await Alert($"The file is a valid {_inputVersion.Replace('_', '.')} BOM.");
        }
        else
        {
            var sb = new StringBuilder();
            foreach (var message in result.Messages)
            {
                sb.AppendLine(message);
            }
            _validationMessage = sb.ToString();
            await Alert($"The file is not a valid {_inputVersion.Replace('_', '.')} BOM.");
        }
    }
}
