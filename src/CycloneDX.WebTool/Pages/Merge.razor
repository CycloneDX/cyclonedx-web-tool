@* This file is part of CycloneDX Web Tool *@
@* *@
@* Licensed under the Apache License, Version 2.0 (the “License”); *@
@* you may not use this file except in compliance with the License. *@
@* You may obtain a copy of the License at *@
@* *@
@* http://www.apache.org/licenses/LICENSE-2.0 *@
@* *@
@* Unless required by applicable law or agreed to in writing, software *@
@* distributed under the License is distributed on an “AS IS” BASIS, *@
@* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *@
@* See the License for the specific language governing permissions and *@
@* limitations under the License. *@
@* *@
@* SPDX-License-Identifier: Apache-2.0 *@
@* Copyright (c) OWASP Foundation. All Rights Reserved. *@

@page "/merge"
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using CycloneDX.Models
@using CycloneDX.Xml
@using CycloneDX.Json

@inject IJSRuntime _jsRuntime;

<h1>Merge</h1>

<p>Merge multiple BOMs</p>

<form>
    <label>
        Input Files
        <InputFile multiple id="inputFiles" OnChange="@LoadInputFiles"></InputFile>
    </label>
    
    <label>
        Input Format
        <select id="inputFormat" @bind="_inputFormat">
            <option value="autodetect" selected="selected">Autodetect</option>
            <option value="json">JSON</option>
            <option value="xml">XML</option>
            <option value="bin">Protobuf</option>
        </select>
    </label>
    
    <label>
        Output Format
        <select id="outputFormat" @bind="_outputFormat">
            <option value="json" selected="selected">JSON</option>
            <option value="xml">XML</option>
            <option value="bin">Protobuf</option>
        </select>
    </label>
    
    <label>
        Version
        <select id="outputVersion" @bind="_outputVersion">
            <option value="v1_4" selected="selected">v1.4</option>
            <option value="v1_3">v1.3</option>
            <option value="v1_2">v1.2</option>
            <option value="v1_1">v1.1</option>
            <option value="v1_0">v1.0</option>
        </select>
    </label>
    
    <button id="merge" type="button" @onclick="@MergeBOM" hidden="@(_inputFileContents == null)">Merge & Download</button>
</form>

@code {
    private List<byte[]> _inputFileContents;
    private List<string> _userInputFilenames;
    private string _inputFormat = "autodetect";
    private string _outputFormat = "json";
    private string _outputVersion = "v1_4";

    private async Task Alert(string message)
    {
        await _jsRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task LoadInputFiles(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            _inputFileContents = new List<byte[]>();
            _userInputFilenames = new List<string>();
            foreach (var file in e.GetMultipleFiles())
            {
                using (var ms = new MemoryStream())
                {
                    await file.OpenReadStream(102400000).CopyToAsync(ms);
                    _inputFileContents.Add(ms.ToArray());
                }
                _userInputFilenames.Add(file.Name);
            }
        }
        else
        {
            _inputFileContents = null;
            _userInputFilenames = null;
        }
    }

    private async Task MergeBOM()
    {
        if (!Enum.TryParse(_outputVersion, out SpecificationVersion specificationVersion))
        {
            await Alert("Looks like you've hit a bug. This shouldn't happen, but there has been a problem reading the schema version.");
            return;
        }

        Models.Bom mergedBom = null;
        for (var i = 0; i < _inputFileContents.Count; i++)
        {
            var fileContents = _inputFileContents[i];
            var filename = _userInputFilenames[i];
            Models.Bom currentBom = null;
            
            if (_inputFormat == "json" || _inputFormat == "autodetect" && filename.EndsWith(".json"))
            {
                try
                {
                    currentBom = Json.Serializer.Deserialize(Encoding.UTF8.GetString(fileContents));
                }
                catch (Exception e)
                {
                    await Alert("Error deserializing BOM: " + e.Message);
                    return;
                }
            }
            else if (_inputFormat == "xml" || _inputFormat == "autodetect" && filename.EndsWith(".xml"))
            {
                try
                {
                    currentBom = Xml.Serializer.Deserialize(Encoding.UTF8.GetString(fileContents));
                }
                catch (Exception e)
                {
                    await Alert("Error deserializing BOM: " + e.Message);
                    return;
                }
            }
            else if (_inputFormat == "bin" || _inputFormat == "autodetect" && filename.EndsWith(".bin"))
            {
                try
                {
                    currentBom = Protobuf.Serializer.Deserialize(fileContents);
                }
                catch (Exception e)
                {
                    await Alert("Error deserializing BOM: " + e.Message);
                    return;
                }
            }
            else
            {
                await Alert("Unable to auto-detect input format. Please specify the format.");
                return;
            }

            if (mergedBom == null)
            {
                mergedBom = currentBom;
            }
            else
            {
                mergedBom = CycloneDXUtils.FlatMerge(mergedBom, currentBom);
            }
        }

        byte[] output;
        
        mergedBom.SpecVersion = specificationVersion;

        if (_outputFormat == "json")
        {
            if (mergedBom.SpecVersion < SpecificationVersion.v1_2)
            {
                await Alert("Invalid version specified for JSON output. JSON output is only supported for versions >= 1.2");
                return;
            }
            else
            {
                output = Encoding.UTF8.GetBytes(Json.Serializer.Serialize(mergedBom));
            }
        }
        else if (_outputFormat == "bin")
        {
            if (mergedBom.SpecVersion < SpecificationVersion.v1_3)
            {
                await Alert("Invalid version specified for Protobuf output. Protobuf output is only supported for versions >= 1.3");
                return;
            }
            else
            {
                output = Protobuf.Serializer.Serialize(mergedBom);
            }
        }
        else
        {
            output = Encoding.UTF8.GetBytes(Xml.Serializer.Serialize(mergedBom));
        }
        
        var outputBom64 = System.Convert.ToBase64String(output);
        
        await _jsRuntime.InvokeVoidAsync("cdxFileDownload", "merged-bom." + _outputFormat, outputBom64);
    }
}
