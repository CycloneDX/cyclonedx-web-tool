@* This file is part of CycloneDX Web Tool *@
@* *@
@* Licensed under the Apache License, Version 2.0 (the “License”); *@
@* you may not use this file except in compliance with the License. *@
@* You may obtain a copy of the License at *@
@* *@
@* http://www.apache.org/licenses/LICENSE-2.0 *@
@* *@
@* Unless required by applicable law or agreed to in writing, software *@
@* distributed under the License is distributed on an “AS IS” BASIS, *@
@* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *@
@* See the License for the specific language governing permissions and *@
@* limitations under the License. *@
@* *@
@* SPDX-License-Identifier: Apache-2.0 *@
@* Copyright (c) OWASP Foundation. All Rights Reserved. *@

@page "/convert"
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using CycloneDX.Models
@using CycloneDX.Xml
@using CycloneDX.Json
@using CycloneDX.Spdx.Interop

@inject IJSRuntime _jsRuntime;

<h1>Convert</h1>

<p>Convert between different serialization formats and versions</p>

<form>
    <label>
        Input File
        <InputFile id="inputFile" OnChange="@LoadInputFile"></InputFile>
    </label>
    
    <label>
        Input Format
        <select id="inputFormat" @bind="_inputFormat">
            <option value="autodetect" selected="selected">Autodetect</option>
            <option value="json">JSON</option>
            <option value="xml">XML</option>
            <option value="bin">Protobuf</option>
            <option value="spdxjson">SPDX JSON</option>
        </select>
    </label>
    
    <label>
        Output Format
        <select id="outputFormat" @bind="_outputFormat">
            <option value="json" selected="selected">JSON</option>
            <option value="xml">XML</option>
            <option value="bin">Protobuf</option>
            <option value="spdxjson">SPDX JSON</option>
        </select>
    </label>
    
    <label>
        Version (ignored for SPDX output)
        <select id="outputVersion" @bind="_outputVersion">
            <option value="v1_4" selected="selected">v1.4</option>
            <option value="v1_3">v1.3</option>
            <option value="v1_2">v1.2</option>
            <option value="v1_1">v1.1</option>
            <option value="v1_0">v1.0</option>
        </select>
    </label>
    
    <button id="convert" type="button" @onclick="@ConvertBOM" hidden="@(_inputFileContents == null)">Convert & Download</button>
</form>

@code {
    private byte[] _inputFileContents;
    private string _userInputFilename;
    private string _inputFormat = "autodetect";
    private string _outputFormat = "json";
    private string _outputVersion = "v1_4";

    private async Task Alert(string message)
    {
        await _jsRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task LoadInputFile(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            await using (var ms = new MemoryStream())
            {
                await e.File.OpenReadStream().CopyToAsync(ms);
                _inputFileContents = ms.ToArray();
            }
            _userInputFilename = e.File.Name;
        }
        else
        {
            _inputFileContents = null;
            _userInputFilename = null;
        }
    }

    private async Task ConvertBOM()
    {
        if (!Enum.TryParse(_outputVersion, out SpecificationVersion specificationVersion))
        {
            await Alert("Looks like you've hit a bug. This shouldn't happen, but there has been a problem reading the schema version.");
            return;
        }

        Models.Bom bom;
        if (_inputFormat == "spdxjson" || _inputFormat == "autodetect" && _userInputFilename.EndsWith(".spdx.json"))
        {
            try
            {
                var spdxDoc = CycloneDX.Spdx.Serialization.JsonSerializer.Deserialize(Encoding.UTF8.GetString(_inputFileContents));
                bom = spdxDoc.ToCycloneDX();
            }
            catch (Exception e)
            {
                await Alert("Error deserializing BOM: " + e.Message);
                return;
            }
        }
        else if (_inputFormat == "json" || _inputFormat == "autodetect" && _userInputFilename.EndsWith(".json"))
        {
            try
            {
                bom = Json.Serializer.Deserialize(Encoding.UTF8.GetString(_inputFileContents));
            }
            catch (Exception e)
            {
                await Alert("Error deserializing BOM: " + e.Message);
                return;
            }
        }
        else if (_inputFormat == "xml" || _inputFormat == "autodetect" && _userInputFilename.EndsWith(".xml"))
        {
            try
            {
                bom = Xml.Serializer.Deserialize(Encoding.UTF8.GetString(_inputFileContents));
            }
            catch (Exception e)
            {
                await Alert("Error deserializing BOM: " + e.Message);
                return;
            }
        }
        else if (_inputFormat == "bin" || _inputFormat == "autodetect" && _userInputFilename.EndsWith(".bin"))
        {
            try
            {
                bom = Protobuf.Serializer.Deserialize(_inputFileContents);
            }
            catch (Exception e)
            {
                await Alert("Error deserializing BOM: " + e.Message);
                return;
            }
        }
        else
        {
            await Alert("Unable to auto-detect input format. Please specify the format.");
            return;
        }

        byte[] output;

        bom.SpecVersion = specificationVersion;
        
        if (_outputFormat == "spdxjson")
        {
            var spdxDoc = bom.ToSpdx();
            var stringOutput = CycloneDX.Spdx.Serialization.JsonSerializer.Serialize(spdxDoc);
            output = Encoding.UTF8.GetBytes(stringOutput);
        }
        else if (_outputFormat == "json")
        {
            if (bom.SpecVersion < SpecificationVersion.v1_2)
            {
                await Alert("Invalid version specified for JSON output. JSON output is only supported for versions >= 1.2");
                return;
            }
            else
            {
                var stringOutput = Json.Serializer.Serialize(bom);
                output = Encoding.UTF8.GetBytes(stringOutput);
            }
        }
        else if (_outputFormat == "bin")
        {
            if (bom.SpecVersion < SpecificationVersion.v1_3)
            {
                await Alert("Invalid version specified for Protobuf output. Protobuf output is only supported for versions >= 1.3");
                return;
            }
            else
            {
                output = Protobuf.Serializer.Serialize(bom);
            }
        }
        else
        {
            var stringOutput = Xml.Serializer.Serialize(bom);
            output = Encoding.UTF8.GetBytes(stringOutput);
        }
        
        var outputBom64 = System.Convert.ToBase64String(output);
        
        var fileExtension = _outputFormat == "spdxjson" ? "spdx.json": _outputFormat;
        await _jsRuntime.InvokeVoidAsync("cdxFileDownload", Path.GetFileNameWithoutExtension(_userInputFilename) + "." + fileExtension, outputBom64);
    }
}
